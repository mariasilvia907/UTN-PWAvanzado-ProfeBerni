Desafio 18 - MongoDB

Listado de consultas para realizar operaciones:

1- Conecto con mongo

mongo  

2- Listo y veo las DB disponibles

show databases

3- Creo y me posiciono sobre la base de datos "ecommerce" 

use ecommerce 

4- Creo la coleccion "mensajes" e ingreso 2 documentos

db.mensajes.insert([
    { autor: "Pepe", texto: "Hola", fecha: "29/8/21" },
    { autor: "Luis", texto: "Que tal?", fecha: "29/8/21" }
    ])

5- Creo la coleccion "productos" e ingreso 8 documentos

db.productos.insert([
    { nombre: "Harina", precio:  120, foto: "foto.png" },
    { nombre: "Arroz", precio:  580, foto: "foto.png" },
    { nombre: "Yerba", precio:  900, foto: "foto.png" },
    { nombre: "Alfajor", precio: 1280, foto: "foto.png" },
    { nombre: "Mani", precio: 2300, foto: "foto.png" },
    { nombre: "Fideos", precio: 4320, foto: "foto.png" },
    { nombre: "Leche", precio: 4990, foto: "foto.png" },
    { nombre: "Manzana", precio: 4990, foto: "foto.png" }
    ])

6- Listar todos los documentos en cada coleccion

db.mensajes.find()
db.productos.find()

7- Mostrar la cantidad de productos en cada una de ellas

db.mensajes.count()
db.productos.count()

8- Realizar CRUD

    //CREATE
    a: Agregar un documento mas en la coleccion "productos"
    db.productos.insert({ nombre: "Tomate", precio:  650, foto: "foto.png" })

    //READ
    b: realizar una consulta por nombre especifico
    db.productos.find({ nombre: "Harina" })

    c: Listar productos con precio menor a 1000
    db.productos.find({ precio: {$lt: 1000} })

    d: Listar productos con precio entre 1000 y 3000
    db.productos.find({$and: [ {precio: {$gt: 1000} }, {precio: {$lt: 3000}} ] })

    e: Listar productos con precio mayor a 3000
    db.productos.find({ precio: {$gt: 3000} })

    f: Realizar una consulta que traiga sólo el nombre del tercer producto más barato.
    db.productos.find({}).sort({ precio: 1}).skip(2).limit(1)

    //UPDATE
    g: Hacer una actualización sobre todos los productos, agregando el campo stock a todos ellos con un valor de 100.
    db.productos.updateMany({},{$set: {stock: 100}})

    h: Cambiar el stock a cero de los productos con precios mayores a 4000 pesos.
    db.productos.updateMany({ precio: {$gt: 4000}},{$set: {stock: 0}})

    //DELETE
    I: Borrar los productos con precio menor a 1000 pesos
    db.productos.deleteMany( { precio: {$lt: 1000}} )

9- Crear un usuario 'pepe' clave: 'asd456' que sólo pueda leer la base de datos ecommerce. 
   Verificar que Pepe no pueda cambiar la información.

db.createUser(
    {
        user: "Pepe",
        pwd: "asd456",
        roles: [
            { role: "read", db: "ecommerce" }
        ]
    })













